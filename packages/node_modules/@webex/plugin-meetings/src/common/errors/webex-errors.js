// The document would auto generate the doc for errors

// 1) error codes for Oauth, login , mercury should be seperated out (Code range)
// 2) Errors from the actual locus server or other server in case, we can use the same error code as locus and redirect it
// 3) Any errors we generate from the SDK can be split into various catagory
// Parameter validatiot, user action, connection, media specific(They can have different range)


// TODO: all the errors from the server need to be captured

// add a way to log and send metrics if needed
const WebexMeetingsError = require('./webex-meetings-error');

const WebExMeetingsErrors = {};

/**
 * Create a {@link WebexMeetingsError} for a given code and message.
 * @private
 * @param {number} [code] - Error code
 * @param {string} [message] - Error message
 * @returns {WebexMeetingsError}
 */
exports.createMeetingsError = function createMeetingsError(code, message) {
  code = typeof code === 'number' ? code : 0;
  message = typeof message === 'string' && message ? message : 'Unknown error';

  return WebExMeetingsErrors[code] ? new WebExMeetingsErrors[code]() : new WebexMeetingsError(code, message);
};

/**
 * @class MeetingNotActiveError
 * @classdesc Raised whenever Meeting has already ended and user tries to do a action.
 * @extends WebexMeetingsError
 * @property {number} code - 30101
 * @property {string} message - 'Meeting has already Ended or not Active'
 */
class MeetingNotActiveError extends WebexMeetingsError {
  constructor() {
    super(30101, 'Meeting has already Ended or not Active');
  }
}

exports.MeetingNotActiveError = MeetingNotActiveError;
Object.defineProperty(WebExMeetingsErrors, 30101, {value: MeetingNotActiveError});

/**
 * @class UserNotJoinedError
 * @classdesc Raised whenever the user has already left the meeting and user tries to do a action.
 * @extends WebexMeetingsError
 * @property {number} code - 30102
 * @property {string} message - 'User has already left the meeting'
 */
class UserNotJoinedError extends WebexMeetingsError {
  constructor() {
    super(30102, 'User has already left the meeting');
  }
}

exports.UserNotJoinedError = UserNotJoinedError;
Object.defineProperty(WebExMeetingsErrors, 30102, {value: UserNotJoinedError});


/**
 * @class NoMediaEstablishedYetError
 * @classdesc Raised whenever the user has not established media yet.
 * @extends WebexMeetingsError
 * @property {number} code - 30103
 * @property {string} message - 'User has not established media yet'
 */
class NoMediaEstablishedYetError extends WebexMeetingsError {
  constructor() {
    super(30103, 'User has not established media yet');
  }
}

exports.NoMediaEstablishedYetError = NoMediaEstablishedYetError;
Object.defineProperty(WebExMeetingsErrors, 30103, {value: NoMediaEstablishedYetError});


/**
 * @class UserInLobbyError
 * @classdesc Raised whenever the user is in lobby and not joined yet.
 * @extends WebexMeetingsError
 * @property {number} code - 30104
 * @property {string} message - 'user is still in the lobby or not joined'
 */
class UserInLobbyError extends WebexMeetingsError {
  constructor() {
    super(30104, 'user is still in the lobby or not joined');
  }
}

exports.UserInLobbyError = UserInLobbyError;
Object.defineProperty(WebExMeetingsErrors, 30104, {value: UserInLobbyError});


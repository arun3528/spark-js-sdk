/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '@webex/internal-plugin-encryption';
import '@webex/internal-plugin-conversation';

import {registerInternalPlugin} from '@webex/webex-core';
import {has} from 'lodash';

import EDiscovery from './ediscovery';
import {InvalidEmailAddressError} from './ediscovery-error';

registerInternalPlugin('ediscovery', EDiscovery, {
  payloadTransformer: {
    predicates: [
      {
        name: 'decryptReportRequest',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.reportRequest'));
        },
        extract(object) {
          return Promise.resolve(object);
        }
      },
      {
        name: 'decryptReportRequestArray',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body[0].reportRequest'));
        },
        extract(object) {
          return Promise.resolve(object);
        }
      },
      {
        name: 'transformReportRequestEmailsToUUIDS',
        direction: 'outbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.emails'));
        },
        extract(object) {
          return Promise.resolve(object);
        }
      },
      {
        name: 'encryptReportRequest',
        direction: 'outbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.keywords') || has(object, 'body.spaceNames') || has(object, 'body.emails'));
        },
        extract(object) {
          return Promise.resolve(object);
        }
      },
      {
        name: 'decryptReportContent',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.activityId'));
        },
        extract(object) {
          return Promise.resolve(object);
        }
      },
      {
        name: 'decryptReportContentArray',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body[0].activityId'));
        },
        extract(object) {
          return Promise.resolve(object);
        }
      },
      {
        name: 'decryptReportContentSummary',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body.spaceId'));
        },
        extract(object) {
          return Promise.resolve(object);
        }
      },
      {
        name: 'decryptReportContentSummaryArray',
        direction: 'inbound',
        test(ctx, object) {
          return Promise.resolve(has(object, 'body[0].spaceId'));
        },
        extract(object) {
          return Promise.resolve(object);
        }
      }
    ],
    transforms: [
      {
        name: 'decryptReportRequest',
        direction: 'inbound',
        fn(ctx, object) {
          if (!object || !object.body || !object.body.reportRequest || !object.body.reportRequest.encryptionKeyUrl) {
            return Promise.resolve();
          }
          const {reportRequest} = object.body;
          let spaceNamePromises = [];

          if (reportRequest.spaceNames) {
            spaceNamePromises = Promise.all(reportRequest.spaceNames.map((spaceName) => ctx.spark.internal.encryption.decryptText(reportRequest.encryptionKeyUrl, spaceName)))
              .then((decryptedSpaceNames) => {
                reportRequest.spaceNames = decryptedSpaceNames;
              });
          }

          let keywordPromises = [];

          if (reportRequest.keywords) {
            keywordPromises = Promise.all(reportRequest.keywords.map((keyword) => ctx.spark.internal.encryption.decryptText(reportRequest.encryptionKeyUrl, keyword)))
              .then((decryptedKeywords) => {
                reportRequest.keywords = decryptedKeywords;
              });
          }

          let emailPromises = [];

          if (reportRequest.emails) {
            emailPromises = Promise.all(reportRequest.emails.map((email) => ctx.spark.internal.encryption.decryptText(reportRequest.encryptionKeyUrl, email)))
              .then((decryptedEmails) => {
                reportRequest.emails = decryptedEmails;
              });
          }

          return Promise.all([
            ctx.transform('decryptTextProp', 'name', reportRequest.encryptionKeyUrl, reportRequest),
            ctx.transform('decryptTextProp', 'description', reportRequest.encryptionKeyUrl, reportRequest)
          ].concat(spaceNamePromises, keywordPromises, emailPromises));
        }
      },
      {
        name: 'decryptReportRequestArray',
        direction: 'inbound',
        fn(ctx, object) {
          if (!object || !object.body) {
            return Promise.resolve();
          }

          return Promise.all(object.body.map((item) => ctx.transform('decryptReportRequest', {body: item})));
        }
      },
      {
        name: 'transformReportRequestEmailsToUUIDS',
        direction: 'outbound',
        fn(ctx, object) {
          if (!object || !object.body || !object.body.emails || object.body.emails.length <= 0) {
            return Promise.resolve();
          }
          const reportRequest = object.body;

          const promises = [];
          const invalidEmails = [];

          reportRequest.emails.forEach((userEmail) => {
            promises.push(
              // The people list API only supports a single email
              ctx.spark.people.list({email: userEmail})
                .then((res) => {
                  let uuid = '';

                  if (res.items.length <= 0) {
                    ctx.spark.logger.error(`Unable to find user with email ${userEmail}`);
                    invalidEmails.push(userEmail);
                  }
                  else {
                    // User id is base64 encoded and of the format Y2lzY29zcGFyazovL3VzL1BFT1BMRS81ZDU5Yjc5NS02ZmEyLTQ2NTQtOGVjMi03NjlkYjE1YzBkOWU
                    const decodedId = Buffer.from(res.items[0].id, 'base64').toString();

                    // Decode and strip out the uuid ciscospark://us/PEOPLE/5d59b795-6fa2-4654-8ec2-769db15c0d9e
                    uuid = decodedId.substring(decodedId.lastIndexOf('/') + 1, decodedId.length);
                  }

                  return uuid;
                })
                .catch((reason) => Promise.reject(reason))
            );
          });

          return Promise.all(promises)
            .then((uuids) => {
              if (invalidEmails.length) {
                return Promise.reject(new InvalidEmailAddressError(invalidEmails));
              }
              reportRequest.userIds = uuids;

              return Promise.resolve();
            });
        }
      },
      {
        name: 'encryptReportRequest',
        direction: 'outbound',
        fn(ctx, object) {
          if (!object || !object.body) {
            return Promise.resolve();
          }
          const reportRequest = object.body;

          return ctx.spark.internal.encryption.kms.createUnboundKeys({count: 1})
            .then((keys) => {
              if (keys && keys.length > 0 && keys[0]) {
                reportRequest.encryptionKeyUrl = keys[0].uri;

                return ctx.spark.internal.encryption.kms.createResource({userIds: [keys[0].userId], keys})
                  .then(() => {
                    const promises = [];

                    if (reportRequest.spaceNames) {
                      promises.push(
                        Promise.all(reportRequest.spaceNames.map((spaceName) => ctx.spark.internal.encryption.encryptText(keys[0], spaceName)))
                          .then((encryptedSpaceNames) => {
                            reportRequest.spaceNames = encryptedSpaceNames;
                          })
                      );
                    }

                    if (reportRequest.keywords) {
                      promises.push(
                        Promise.all(reportRequest.keywords.map((keyword) => ctx.spark.internal.encryption.encryptText(keys[0], keyword)))
                          .then((encryptedKeywords) => {
                            reportRequest.keywords = encryptedKeywords;
                          })
                      );
                    }

                    if (reportRequest.emails) {
                      promises.push(
                        Promise.all(reportRequest.emails.map((email) => ctx.spark.internal.encryption.encryptText(keys[0], email)))
                          .then((encryptedEmails) => {
                            reportRequest.emails = encryptedEmails;
                          })
                      );
                    }

                    promises.push(ctx.transform('encryptTextProp', 'name', keys[0], reportRequest));
                    promises.push(ctx.transform('encryptTextProp', 'description', keys[0], reportRequest));

                    return Promise.all(promises);
                  });
              }

              return Promise.resolve();
            })
            .catch((reason) => Promise.reject(reason));
        }
      },
      {
        name: 'decryptReportContent',
        direction: 'inbound',
        fn(ctx, object, reportId) {
          if (!object || !object.body || !reportId) {
            return Promise.resolve();
          }
          const activity = object.body;

          const promises = [];

          return ctx.spark.internal.ediscovery.getContentSummaryBySpaceId(reportId, activity.targetId)
            .then((spaceSummary) => {
              if (!spaceSummary) {
                ctx.spark.logger.error(`Undefined space summary for activity ${activity.activityId}`);

                return object;
              }

              // set space name and participants on activity
              if (spaceSummary.spaceName) {
                activity.spaceName = spaceSummary.spaceName;
              }

              if (spaceSummary.participantDisplayNames) {
                // Remove sender from list of participants as they will appear in the 'To' field
                activity.participantDisplayNames = spaceSummary.participantDisplayNames.filter((value) => value !== activity.actorDisplayName).toString();
                if (spaceSummary.isOneOnOne) {
                  // One to One spaces have no space name, use participant names as 'Subject' instead
                  activity.spaceName = spaceSummary.participantDisplayNames.toString().replace(',', ' & ');
                }
              }

              // decrypt content
              let spaceParticipantId;

              if (spaceSummary.participants && spaceSummary.participants.length) {
                spaceParticipantId = spaceSummary.participants[0];
              }
              else {
                // TODO: Resolve with assistance from KMS team
                ctx.spark.logger.error(`Known error - detected space with no participant - unable to decrypt activity ${activity.activityId}`);

                return activity;
              }

              // Decrypt activity message if present
              // For 'add' activities the objectDisplayName is a user id which does not need to be decrypted
              if (activity.verb !== 'add' && activity.objectDisplayName && activity.encryptionKeyUrl) {
                promises.push(ctx.spark.internal.encryption.decryptText(activity.encryptionKeyUrl, activity.objectDisplayName, {onBehalfOf: spaceParticipantId})
                  .then((decryptedMessage) => {
                    activity.objectDisplayName = decryptedMessage;
                  })
                  .catch((reason) => {
                    ctx.spark.logger.error(`Decrypt message error for activity ${activity.activityId}: ${reason}`);

                    return object; // TODO - determine correct behaviour when an individual operation fails
                  }));
              }

              // Decrypt shares (files, whiteboards, shared links)
              // Array.prototype.concat.apply ignores undefined
              let shares = Array.prototype.concat.apply([], activity.files);

              shares = Array.prototype.concat.apply(shares, activity.whiteboards);
              shares = Array.prototype.concat.apply(shares, activity.links);
              for (let i = 0; i < shares.length; i += 1) {
                const share = shares[i];
                // Decrypt the share's display name
                // Ignore display names for whiteboards which are unencrypted
                // Ignore the unencrypted 'NoName' display name the ED service sets in error situations

                if (share.displayName && (!activity.whiteboards || !activity.whiteboards.includes(share)) && share.displayName !== 'NoName') {
                  promises.push(
                    ctx.spark.internal.encryption.decryptText(activity.encryptionKeyUrl, share.displayName, {onBehalfOf: spaceParticipantId})
                      .then((decryptedDisplayName) => {
                        share.displayName = decryptedDisplayName;
                      })
                      .catch((reason) => {
                        ctx.spark.logger.error(`Decrypt DisplayName error for activity ${activity.activityId} and share ${share}: ${reason}`);

                        return object; // TODO - determine correct behaviour when an individual operation fails
                      })
                  );
                }

                // Shared Links can have additional decryption fields
                if (share.microsoftSharedLinkInfo) {
                  if (share.microsoftSharedLinkInfo.driveId) {
                    promises.push(
                      ctx.spark.internal.encryption.decryptText(activity.encryptionKeyUrl, share.microsoftSharedLinkInfo.driveId, {onBehalfOf: spaceParticipantId})
                        .then((decryptedDriveId) => {
                          share.microsoftSharedLinkInfo.driveId = decryptedDriveId;
                        })
                        .catch((reason) => {
                          ctx.spark.logger.error(`Decrypt share.microsoftSharedLinkInfo.driveId error for activity ${activity.activityId} and share ${share}: ${reason}`);

                          return object; // TODO - determine correct behaviour when an individual operation fails
                        })
                    );
                  }

                  if (share.microsoftSharedLinkInfo.itemId) {
                    promises.push(
                      ctx.spark.internal.encryption.decryptText(activity.encryptionKeyUrl, share.microsoftSharedLinkInfo.itemId, {onBehalfOf: spaceParticipantId})
                        .then((decryptedItemId) => {
                          share.microsoftSharedLinkInfo.itemId = decryptedItemId;
                        })
                        .catch((reason) => {
                          ctx.spark.logger.error(`Decrypt share.microsoftSharedLinkInfo.itemId error for activity ${activity.activityId} and share ${share}: ${reason}`);

                          return object; // TODO - determine correct behaviour when an individual operation fails
                        })
                    );
                  }
                }

                // Decrypt the scr (Secure Content Reference) or sslr (Secure Shared Link Reference)
                // Unlike a scr the sslr contains only a loc. But decryptScr(...) is flexible and
                // leaves the tag, auth, IV, etc fields on the SCR object as undefined.
                if (share.scr || share.sslr) {
                  promises.push(
                    ctx.spark.internal.encryption.decryptScr(activity.encryptionKeyUrl, share.scr || share.sslr, {onBehalfOf: spaceParticipantId})
                      .then((decryptedSCR) => {
                        if (share.scr) {
                          share.scr = decryptedSCR;
                        }
                        else {
                          share.sslr = decryptedSCR.loc;
                        }
                      })
                      .catch((reason) => {
                        ctx.spark.logger.error(`Decrypt file scr or sslr error for activity ${activity.activityId} and share ${share}: ${reason}`);

                        return object; // TODO - determine correct behaviour when an individual operation fails
                      })
                  );
                }
              }

              return Promise.all(promises);
            })
            .catch((reason) => {
              ctx.spark.logger.error(`Error retrieving space summary for: ${object.activityId}: ${reason}`);

              return object;
            });
        }
      },
      {
        name: 'decryptReportContentArray',
        direction: 'inbound',
        fn(ctx, object) {
          if (!object || !object.body) {
            return Promise.resolve();
          }
          // the report id is needed in order to retrieve space information for activities with whiteboards so that
          // the list of users in those spaces can be accessed and the content can be decrypted on their behalf
          const reportId = object.options.resource.split('/')[1];

          return Promise.all(object.body.map((item) => ctx.transform('decryptReportContent', {body: item}, reportId)));
        }
      },
      {
        name: 'decryptReportContentSummary',
        direction: 'inbound',
        fn(ctx, object) {
          if (!object || !object.body || !object.body.spaceName || !object.body.participants || !object.body.participants.length) {
            return Promise.resolve();
          }
          const spaceSummary = object.body;

          return ctx.spark.internal.encryption.decryptText(spaceSummary.encryptionKeyUrl, spaceSummary.spaceName, {onBehalfOf: spaceSummary.participants[0]})
            .then((decryptedSpaceName) => {
              spaceSummary.spaceName = decryptedSpaceName;
            })
            .catch((reason) => {
              ctx.spark.logger.error(`Decrypt space name error for space ${spaceSummary.spaceId}: ${reason}`);

              return object; // TODO - determine correct behaviour when an individual operation fails
            });
        }
      },
      {
        name: 'decryptReportContentSummaryArray',
        direction: 'inbound',
        fn(ctx, object) {
          if (!object || !object.body) {
            return Promise.resolve();
          }

          return Promise.all(object.body.map((item) => ctx.transform('decryptReportContentSummary', {body: item})));
        }
      }
    ]
  }
});

export default EDiscovery;

export {config} from './config';
export {default as ReportRequest} from './report-request';
export {EdiscoveryError, InvalidEmailAddressError} from './ediscovery-error';

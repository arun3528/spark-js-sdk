import testUsers from '@webex/test-helper-test-users';
import {expect} from 'chai';

describe('samples', () => {
  describe('browser-single-party-call', () => {
    describe('dial before connecting', () => {
      let mccoy, spock;

      const browserSpock = browser.select('browserSpock');
      const browserMccoy = browser.select('browserMccoy');

      before('create test users', () => testUsers.create({count: 2})
        .then((users) => {
          [spock, mccoy] = users;
        }));

      before('reload browser', () => {
        browser.refresh();
      });

      it('loads the app', () => {
        browser.url('/browser-single-party-call');
      });

      it('places call from mccoy to spock', () => {
        expect(browserMccoy.getTitle()).to.equal('Sample: Single Party Calling');
        browserMccoy.setValue('[placeholder="Your access token"]', spock.token.access_token);

        browserMccoy.setValue('[placeholder="Person ID or Email Address or SIP URI or Room ID"]', mccoy.emailAddress);
        browserMccoy.click('[title="dial"]');

        browserMccoy.waitForExist('.listening');
      });

      it('connects spock\'s browser', () => {
        expect(browserSpock.getTitle()).to.equal('Sample: Single Party Calling');
        browserSpock.setValue('[placeholder="Your access token"]', mccoy.token.access_token);
        // Throw some more delay in to make sure the call is definitely ready to go

        browserSpock.click('[title="connect"]');
        browserSpock.waitForExist('.listening');

        browserSpock.pause(2500);
        browserSpock.alertAccept();
      });

      it('ends the call', () => {
        browser.pause(5000);
        // TODO add assertions around streams

        browserMccoy.click('[title="hangup"]');
      });
    });
  });
});
